<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document to PowerPoint Converter</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.6.0/mammoth.browser.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pptxgenjs/3.12.0/pptxgen.bundle.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }

        .upload-section {
            border: 2px dashed #ccc;
            padding: 20px;
            text-align: center;
            margin-bottom: 20px;
            border-radius: 4px;
        }

        .upload-section.dragover {
            background-color: #e9ecef;
            border-color: #666;
        }

        button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin: 10px 0;
        }

        button:hover {
            background-color: #0056b3;
        }

        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        #status {
            margin-top: 20px;
            padding: 10px;
            border-radius: 4px;
        }

        .success {
            background-color: #d4edda;
            color: #155724;
        }

        .error {
            background-color: #f8d7da;
            color: #721c24;
        }

        #preview {
            margin-top: 20px;
            border: 1px solid #ddd;
            padding: 10px;
            max-height: 300px;
            overflow-y: auto;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background-color: #f0f0f0;
            border-radius: 10px;
            margin: 10px 0;
            overflow: hidden;
        }

        .progress {
            width: 0%;
            height: 100%;
            background-color: #4CAF50;
            transition: width 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Document to PowerPoint Converter</h1>
        
        <div class="upload-section" id="dropZone">
            <p>Drag and drop a Word or PDF file here, or click to select</p>
            <input type="file" id="fileInput" accept=".docx,.pdf" style="display: none;">
            <button onclick="document.getElementById('fileInput').click()">Select File</button>
        </div>

        <div class="progress-bar">
            <div class="progress" id="progressBar"></div>
        </div>

        <div id="status"></div>
        <div id="preview"></div>
        
        <button id="convertBtn" disabled>Convert to PowerPoint</button>
    </div>

    <script>
        // Initialize PDF.js worker
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

        let slides = [];
        let currentFile = null;

        // Setup drag and drop
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const status = document.getElementById('status');
        const preview = document.getElementById('preview');
        const convertBtn = document.getElementById('convertBtn');
        const progressBar = document.getElementById('progressBar');

        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('dragover');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('dragover');
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('dragover');
            const file = e.dataTransfer.files[0];
            handleFile(file);
        });

        fileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            handleFile(file);
        });

        function handleFile(file) {
            currentFile = file;
            status.innerHTML = `Processing ${file.name}...`;
            status.className = '';
            preview.innerHTML = '';
            slides = [];
            convertBtn.disabled = true;
            progressBar.style.width = '0%';

            if (file.name.endsWith('.docx')) {
                processWord(file);
            } else if (file.name.endsWith('.pdf')) {
                processPDF(file);
            } else {
                status.innerHTML = 'Please upload a Word (.docx) or PDF file.';
                status.className = 'error';
            }
        }

        async function processWord(file) {
            try {
                const arrayBuffer = await file.arrayBuffer();
                const result = await mammoth.convertToHtml({ arrayBuffer });
                const content = result.value;
                
                // Split content by horizontal rules
                const sections = content.split('<hr>');
                slides = sections.filter(section => section.trim() !== '').map(section => {
                    return {
                        content: section.trim(),
                        type: 'word'
                    };
                });

                updatePreview();
                status.innerHTML = 'Word document processed successfully!';
                status.className = 'success';
                convertBtn.disabled = false;
            } catch (error) {
                status.innerHTML = 'Error processing Word document: ' + error.message;
                status.className = 'error';
            }
        }

        async function processPDF(file) {
            try {
                const arrayBuffer = await file.arrayBuffer();
                const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
                const totalPages = pdf.numPages;
                slides = [];

                let currentSlide = '';
                for (let i = 1; i <= totalPages; i++) {
                    progressBar.style.width = `${(i / totalPages) * 100}%`;
                    
                    const page = await pdf.getPage(i);
                    const textContent = await page.getTextContent();
                    const pageText = textContent.items.map(item => item.str).join(' ');

                    // Check for horizontal rule markers
                    if (pageText.includes('_________')) {
                        if (currentSlide.trim() !== '') {
                            slides.push({
                                content: currentSlide.trim(),
                                type: 'pdf'
                            });
                            currentSlide = '';
                        }
                    } else {
                        currentSlide += pageText + ' ';
                    }
                }

                // Add the last slide if it exists
                if (currentSlide.trim() !== '') {
                    slides.push({
                        content: currentSlide.trim(),
                        type: 'pdf'
                    });
                }

                updatePreview();
                status.innerHTML = 'PDF processed successfully!';
                status.className = 'success';
                convertBtn.disabled = false;
            } catch (error) {
                status.innerHTML = 'Error processing PDF: ' + error.message;
                status.className = 'error';
            }
        }

        function updatePreview() {
            preview.innerHTML = slides.map((slide, index) => `
                <div style="margin-bottom: 20px; padding: 10px; border: 1px solid #ccc;">
                    <h3>Slide ${index + 1}</h3>
                    <div>${slide.content}</div>
                </div>
            `).join('');
        }

        convertBtn.addEventListener('click', generatePowerPoint);

        async function generatePowerPoint() {
            try {
                status.innerHTML = 'Generating PowerPoint...';
                const pptx = new PptxGenJS();

                // Set presentation properties
                pptx.author = 'Document Converter';
                pptx.title = currentFile.name.split('.')[0];

                // Create slides
                for (const slideContent of slides) {
                    const slide = pptx.addSlide();
                    
                    // Add text content to slide
                    slide.addText(slideContent.content, {
                        x: 0.5,
                        y: 0.5,
                        w: '90%',
                        h: '90%',
                        fontSize: 14,
                        color: '363636',
                        breakLine: true,
                        wrap: true
                    });
                }

                // Save the PowerPoint file
                const fileName = `${currentFile.name.split('.')[0]}.pptx`;
                await pptx.writeFile({ fileName: fileName });
                
                status.innerHTML = 'PowerPoint file generated successfully!';
                status.className = 'success';
            } catch (error) {
                status.innerHTML = 'Error generating PowerPoint: ' + error.message;
                status.className = 'error';
            }
        }
    </script>
</body>
</html>
